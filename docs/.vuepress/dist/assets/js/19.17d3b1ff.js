(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{40:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"编译器之-parser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器之-parser","aria-hidden":"true"}},[t._v("#")]),t._v(" 编译器之 parser")]),a("p",[t._v("在 "),a("a",{attrs:{href:"/note/7Vue%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E5%88%9D%E6%8E%A2"}},[t._v("Vue的编译器初探")]),t._v(" 这一章节中，我们对 "),a("code",[t._v("Vue")]),t._v(" 如何创建编译器，以及在这个过程中经历过的几个重要的函数做了分析，比如 "),a("code",[t._v("compileToFunctions")]),t._v(" 函数以及 "),a("code",[t._v("compile")]),t._v(" 函数，并且我们知道真正对模板进行编译工作的实际是 "),a("code",[t._v("baseCompile")]),t._v(" 函数，而接下来我们任务就是搞清楚 "),a("code",[t._v("baseCompile")]),t._v(" 函数的内容。")]),a("p",[a("code",[t._v("baseCompile")]),t._v(" 函数是在 "),a("code",[t._v("src/compiler/index.js")]),t._v(" 中作为 "),a("code",[t._v("createCompilerCreator")]),t._v(" 函数参数使用的，代码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `createCompilerCreator` allows creating compilers that use alternative")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parser/optimizer/codegen, e.g the SSR optimizing compiler.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Here we just export a default compiler using the default parts.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCompilerCreator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("optimize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    render"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    staticRenderFns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("可以看到 "),a("code",[t._v("baseCompile")]),t._v(" 函数接收两个参数，分别是字符串模板("),a("code",[t._v("template")]),t._v(")和选项参数("),a("code",[t._v("options")]),t._v(")，其中选项参数 "),a("code",[t._v("options")]),t._v(" 我们已经分析过了，并且我们有对应的附录专门整理编译器的选项参数，可以在 "),a("a",{attrs:{href:"/note/%E9%99%84%E5%BD%95/compiler-options"}},[t._v("编译器选项整理")]),t._v(" 中查看。")]),a("p",[a("code",[t._v("baseCompile")]),t._v(" 函数很简短，由三句代码和一个 "),a("code",[t._v("return")]),t._v(" 语句组成，这三句代码的作用如以下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 parse 函数将字符串模板解析成抽象语法树(AST)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 optimize 函数优化 ast")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("optimize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 generate 函数将 ast 编译成渲染函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("最终 "),a("code",[t._v("baseCompile")]),t._v(" 的返回值如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  render"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  staticRenderFns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("可以看到，其最终返回了抽象语法树("),a("code",[t._v("ast")]),t._v(")，渲染函数("),a("code",[t._v("render")]),t._v(")，静态渲染函数("),a("code",[t._v("staticRenderFns")]),t._v(")，且 "),a("code",[t._v("render")]),t._v(" 的值为 "),a("code",[t._v("code.render")]),t._v("，"),a("code",[t._v("staticRenderFns")]),t._v(" 的值为 "),a("code",[t._v("code.staticRenderFns")]),t._v("，也就是说通过 "),a("code",[t._v("generate")]),t._v(" 处理 "),a("code",[t._v("ast")]),t._v(" 之后得到的返回值 "),a("code",[t._v("code")]),t._v(" 是一个对象，该对象的属性中包含了渲染函数（"),a("strong",[t._v("注意以上提到的渲染函数，都以字符串的形式存在，因为真正变成函数的过程是在 "),a("code",[t._v("compileToFunctions")]),t._v(" 中使用 "),a("code",[t._v("new Function()")]),t._v(" 来完成的")]),t._v("）。")]),a("p",[t._v("而接下来我们将会花费很大的篇幅来聚焦在一句代码上，即下面这句代码：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("也就是 "),a("code",[t._v("Vue")]),t._v(" 的 "),a("code",[t._v("parser")]),t._v("，它是如何将字符串模板解析为抽象语法树的("),a("code",[t._v("AST")]),t._v(")。")]),a("h2",{attrs:{id:"对-parser-简单介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对-parser-简单介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 对 parser 简单介绍")]),a("p",[t._v("在说 "),a("code",[t._v("parser")]),t._v(" 之前，我们先了解一下编译器的概念，科班出身的你，应该对编译器的概念有所了解，简单的讲编译器就是将 "),a("code",[t._v("源代码")]),t._v(" 转换成 "),a("code",[t._v("目标代码")]),t._v(" 的工具。详细一点如下(引用自维基百科)：")]),a("blockquote",[a("p",[t._v("它主要的目的是将便于人编写、阅读、维护的高级计算机语言所写作的 "),a("code",[t._v("源代码")]),t._v(" 程序，翻译为计算机能解读、运行的低阶机器语言的程序。"),a("code",[t._v("源代码")]),t._v(" 一般为高阶语言（High-level language），如Pascal、C、C++、C# 、Java等，而目标语言则是汇编语言或目标机器的目标代码（Object code）。")])]),a("p",[t._v("编译器所包含的概念很多，比如 词法分析，语义分析，类型检查/推导，代码优化，代码生成...等等，且大学中已有专门的课程，而我们这里要将的 "),a("code",[t._v("parser")]),t._v(" 就是编译器中的一部分，准确的说，"),a("code",[t._v("parser")]),t._v(" 是编译器对源代码处理的第一步。")]),a("p",[t._v("说点题外话，看到这里的同学，如果你不是科班出身，请不要对自己产生怀疑，一个对你最简单有效鼓励方式是：这套系列文章的作者，也就是我本人也不是科班出身的。如果这对你的鼓励不够，那我再换一种方式："),a("code",[t._v("Vue")]),t._v(" 的作者也不是科班出身的，这次够了吗？知识是死的但人是活的，知识就摆在那里，你学了多了就会了多少。")]),a("p",[t._v("回到正题，我们说 "),a("code",[t._v("parser")]),t._v(" 是编译器处理源代码的第一步，原因是什么呢？接下来我们讲一讲什么是 "),a("code",[t._v("parser")]),t._v("。")]),a("p",[a("code",[t._v("parser")]),t._v(" 是把某种特定格式的文本转换成某种数据结构的程序，其中“特定格式的文本”可以理解为普通的字符串，而 "),a("code",[t._v("parser")]),t._v(" 的作用就是将这个字符串转换成一种数据结构，并且这个数据结构是编译器能够理解的，因为编译器的后续步骤，比如上面提到的 语义分析，类型检查/推导，代码优化，代码生成 等等都依赖于该数据结构，正因如此我们才说 "),a("code",[t._v("parser")]),t._v(" 是编译器处理源代码的第一步，并且这种数据结构是抽象的，我们常称其为抽象语法树，即 "),a("code",[t._v("AST")]),t._v("。")])])}],!1,null,null,null);s.default=n.exports}}]);